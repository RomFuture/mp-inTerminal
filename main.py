import os, sys, json
import curses
from itertools import count
import time
import threading

import pygame
from mutagen.mp3 import MP3
import random
from music_mix import ML
from Color_Console import *
import locale

locale.setlocale(locale.LC_ALL, '')
pygame.init()
pygame.mixer.init()

current_track = ""

ZASTAVKA = [
r"""_______                   _             _     _           """,
r"""|__   __|                | |           | |   (_)          """,
r"""    | |_ __ __ ___      _| | ___   __ _| |__  _ _ __  ___  """,
r"""    | | '__/ _` \ \ /\ / / |/ _ \ / _` | '_ \| | '_ \/ __| """,
r"""    | | | | (_| |\ V  V /| | (_) | (_| | |_) | | | | \__ \ """,
r"""    |_|_|  \__,_| \_/\_/ |_|\___/ \__,_|_.__/|_|_| |_|___/ """,
r"""                ~ Terminal Beats ~ """]

ART = [
r"""...................--++###""",
r"""...........--++###########""",
r""".......-##################""",
r"""......-+#############+-###""",
r"""......-+######+---.....+##""",
r"""......-+##-............+##""",
r"""......-+##.............+##""",
r"""......-+##.............+##""",
r"""......-+##.............+##""",
r"""......-+##.........--+####""",
r"""......-+##......-#########""",
r"""..--######......##########""",
r"""-#########......-#######+.""",
r"""#########+..........-.....""",
r"""-######+-.................""",
]

################################################################################
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ë–õ–û–ö –ö–û–ù–§–ò–ì–ê  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
################################################################################

CONFIG_FILE = os.path.join(os.path.dirname(sys.argv[0]), 'config.json')

def load_last_path() -> str | None:
    """–ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—É—Ç—å –∏–∑ config.json (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    try:
        with open(CONFIG_FILE, encoding='utf-8') as f:
            data = json.load(f)
            return data.get('music_folder')
    except (FileNotFoundError, json.JSONDecodeError):
        return None

def save_last_path(path: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å –≤ config.json."""
    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump({'music_folder': path}, f, ensure_ascii=False, indent=2)

def get_valid_mp3(folder: str) -> list[str]:
    """–ò—â–µ—Ç mp3-—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)."""
    return [f for f in os.listdir(folder) if f.lower().endswith('.mp3')]

def ask_music_folder() -> tuple[str, list[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (music_folder, music_files), –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–ø—Ä–∞—à–∏–≤–∞—è –ø—É—Ç—å."""
    # 1Ô∏è‚É£  –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø—É—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    last_path = load_last_path()
    if last_path and os.path.isdir(last_path):
        files = get_valid_mp3(last_path)
        if files:                       # –≤—Å—ë –æ–∫ ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º ¬´—Å—Ç–∞—Ä—ã–π¬ª –ø—É—Ç—å
            print(f'üéµ –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –ø–∞–ø–∫—É: {last_path}')
            return last_path, files
        else:
            print('‚ö† –°—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç MP3 ‚Äì –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é.')

    # 2Ô∏è‚É£  —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    while True:
        raw = input('\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º—É–∑—ã–∫–æ–π ‚Üí ').strip(' "\'')
        folder = os.path.abspath(os.path.expanduser(raw))
        if not os.path.isdir(folder):
            print('‚õî –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
            continue
        files = get_valid_mp3(folder)
        if not files:
            print('‚õî –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç MP3-—Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.')
            continue
        save_last_path(folder)          # 3Ô∏è‚É£  —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–∞—á–Ω—ã–π –≤—ã–±–æ—Ä
        return folder, files
################################################################################

# ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
music_folder, music_files = ask_music_folder()


music_playing = True

valid_music_files = []
for f in music_files:
    audio = MP3(os.path.join(music_folder, f))
    if round(audio.info.length) >= 60:
        valid_music_files.append(f)

random.shuffle(valid_music_files)
music_list = ML()

def music_list_main(music_file):
    Current_index = valid_music_files.index(music_file)
    Mapa = []
    for item in range(-1,4):
        try:
            Mapa.append(valid_music_files[int(Current_index) + item])
        except:
            continue
    return Mapa


def get_russian_ending(number, forms):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    forms: [–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–∞—è –µ–¥., —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –µ–¥., —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–Ω.]
    –ü—Ä–∏–º–µ—Ä: ["–º–∏–Ω—É—Ç–∞", "–º–∏–Ω—É—Ç—ã", "–º–∏–Ω—É—Ç"]
    """
    number = int(number)
    if 11 <= number % 100 <= 14:
        return forms[2]
    last_digit = number % 10
    if last_digit == 1:
        return forms[0]
    elif 2 <= last_digit <= 4:
        return forms[1]
    else:
        return forms[2]

def bottom_panel(music_file):
    Nau = MP3(os.path.join(music_folder, music_file)).info.length
    minutes = int(Nau // 60)
    seconds = int(round(Nau % 60))

    min_label = get_russian_ending(minutes, ["–º–∏–Ω—É—Ç–∞", "–º–∏–Ω—É—Ç—ã", "–º–∏–Ω—É—Ç"])
    sec_label = get_russian_ending(seconds, ["—Å–µ–∫—É–Ω–¥–∞", "—Å–µ–∫—É–Ω–¥—ã", "—Å–µ–∫—É–Ω–¥"])

    return f"{minutes} {min_label} –∏ {seconds} {sec_label}"

def play_current():
    pygame.mixer.music.stop()
    current_file = valid_music_files[music_list.index]
    pygame.mixer.music.load(os.path.join(music_folder, current_file))
    pygame.mixer.music.play()
    return current_file

def stop_current():
    pygame.mixer.music.stop()

def pause_current():
    global music_playing
    if music_playing == True:
        pygame.mixer.music.pause()
        music_playing = False
    else:
        pygame.mixer.music.unpause()
        music_playing = True


def track_watcher():
    global current_track
    while True:
        if not pygame.mixer.music.get_busy() and music_playing is True:
            time.sleep(1)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å CPU
            if not pygame.mixer.music.get_busy():
                if music_list.index < len(valid_music_files) - 1:
                    music_list.next_track()
                    current_track = play_current()
        time.sleep(1)


def main_menu(stdscr):
    global current_track
    global music_playing
    curses.curs_set(0)
    menu = ["–°–õ–ï–î‚è≠", "–°–¢–û–ü‚èπ", "–ü–†–ï–î‚èÆ", "–í–´–•–û–î‚úñ"]
    selected = 0
    current_track = play_current()

    threading.Thread(target=track_watcher, daemon=True).start()

    while True:
        if pygame.mixer.music.get_busy() is False and music_playing is True:
            if music_list.index < len(valid_music_files) - 1:
                music_list.next_track()
                current_track = play_current()
        stdscr.clear()
        count = -1
        for item in ZASTAVKA:
            count += 1
            stdscr.addstr(count,10,item)
        # –†–∏—Å—É–µ–º –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é —Ä–∞–º–∫—É
        top, left, width = 9, 20, 20
        height = len(menu) + 1

        stdscr.addstr(top, left, '+')
        stdscr.addstr(top, left + width - 1, '+')
        stdscr.addstr(top + height, left, '+')
        stdscr.addstr(top + height, left + width - 1, '+')

        for x in range(left + 1, left + width - 1, 2):
            stdscr.addstr(top, x, '-')
            stdscr.addstr(top + height, x, '-')
        for y in range(top + 1, top + height):
            stdscr.addstr(y, left, '|')
            stdscr.addstr(y, left + width - 1, '|')

        # –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é
        for idx, item in enumerate(menu):
            line = item.ljust(width - 4)
            x = left + 2
            y = top + 1 + idx
            if idx == selected:
                stdscr.attron(curses.A_REVERSE)
                stdscr.addstr(y, x, line)
                stdscr.attroff(curses.A_REVERSE)
            else:
                stdscr.addstr(y, x, line)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        stdscr.addstr(top + 8, left + 4, bottom_panel(current_track))
        stdscr.addstr(top + 9, left + 9, f"‚Äî {current_track}")

        # –õ–∏—Å—Ç —Å –º—É–∑—ã–∫–æ–π
        list_mapa = music_list_main(current_track)
        count = -1
        for item in list_mapa:
            count += 1
            stdscr.addstr(top + count, left + 30, item)

        #–ê–†–¢
        count = -1
        for item in ART:
            count += 1
            stdscr.addstr(top + count - 5, left + 63, item)

        stdscr.nodelay(True)
        stdscr.timeout(100)
        stdscr.refresh()
        key = stdscr.getch()


        if key == curses.KEY_UP and selected > 0:
            selected -= 1
        elif key == curses.KEY_DOWN and selected < len(menu) - 1:
            selected += 1
        elif key in (10, 13):  # Enter
            if menu[selected] == "–í–´–•–û–î‚úñ":
                stop_current()
                break
            elif menu[selected] == "–°–¢–û–ü‚èπ":
                pause_current()
            elif menu[selected] == "–°–õ–ï–î‚è≠":
                if music_list.index < len(valid_music_files) - 1:
                    music_list.next_track()
                    current_track = play_current()
            elif menu[selected] == "–ü–†–ï–î‚èÆ":
                if music_list.index > 0:
                    music_list.last_track()
                    current_track = play_current()



curses.wrapper(main_menu)